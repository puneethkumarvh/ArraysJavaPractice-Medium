//Question link: https://www.naukri.com/code360/problems/alternate-numbers_6783445?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTab=0&leftPanelTabValue=PROBLEM
//my solution--I coded without any hint,really happy moment.
//I could have used queus to implement this to reduce reversing of array.
//code
import java.util.*;
public class Solution {
    public static int[] alternateNumbers(int []a) {
        int []arr=new int[a.length];
        Stack<Integer> st=new Stack<>();
        int pos=0;
        int neg = 0;
        while(pos<a.length && neg < a.length){
            while(a[pos]<0){
                pos++;
            }
            st.push(a[pos]);
            pos++;
            while(a[neg]>0 ){
                neg++;
            }
            st.push(a[neg]);
            neg++;
        }
        int i=0;
        while(st.size()>0){
            arr[i]=st.pop();
            i++;
        }
       //Reverse array
        int j=0;
        int k= arr.length-1;
        while(j<k){
            int temp=arr[j];
            arr[j]=arr[k];
            arr[k]=temp;
            j++;
            k--;
        }
        return arr;

        }
}

//Using array in O(N) time and space complexity.
//code 
public class Solution {
    public static int[] alternateNumbers(int []a) {
        int []arr=new int[a.length];
        int pos=0;
        int neg = 1;
        for(int i:a){
            if(i>0){
                arr[pos]=i;
                pos+=2;
            }else{
                arr[neg]=i;
                neg+=2;
            }

        }
        return arr;
    }
}
